Pandoc (Meta {unMeta = fromList []})
 [Para [Str ""]
 ,Para [Str "Integrating", Space, Str "Functional", Space, Str "Genomics", Space, Str "into", Space, Str "Phylogenomics"]
 ,Para [Str "Here", Space, Str "we", Space, Str "will", Space, Str "outline", Space, Str "the", Space, Str "processs", Space, Str "to", Space, Str "identify", Space, Str "where", Space, Str "a", Space, Str "UCE", Space, Str "loci", Space, Str "is", Space, Str "found", Space, Str "in", Space, Str "the", Space, Str "genome,", Space, Str "next", Space, Str "to", Space, Str "chatagorize", Space, Str "it", Space, Str "(intronic,", Space, Str "exotic,", Space, Str "intergenic)", Space, Str ".", Space, Str "Once", Space, Str "the", Space, Str "genetic", Space, Str "class", Space, Str "has", Space, Str "been", Space, Str "identified", Space, Str "we", Space, Str "then", Space, Str "go", Space, Str "through", Space, Str "how", Space, Str "to", Space, Str "merge", Space, Str "loci", Space, Str "by", Space, Str "gene", Space, Str "and", Space, Str "conduct", Space, Str "species", Space, Str "tree", Space, Str "analyses", Space, Str "in", Space, Str "ASTRAL-III.", Space, Str "Please", Space, Str "cite:"]
 ,Para [Emph [Str "Van", Space, Str "Dam", Space, Str "M.", Space, Str "H.,", Space, Str "Henderson", Space, Str "J.", Space, Str "B.,", Space, Str "Esposito", Space, Str "L.,", Space, Str "Trautwein", Space, Str "M.", Space, Str "Incorporating", Space, Str "functional", Space, Str "genomics", Space, Str "into", Space, Str "UCE", Space, Str "phylogenomics", Space, Str "improves", Space, Str "gene", Space, Str "and", Space, Str "species", Space, Str "tree", Space, Str "reconstructions.", Space, Str "(2018)."]]
 ,Para [Str "Corresponding", Space, Str "author:", Space, Str "Matthew", Space, Str "H.", Space, Str "Van", Space, Str "Dam,", Space, Str "email:", Space, Str "(", Link ("", [], []) [Str "matthewhvandam@gmail.com"] ("mailto:matthewhvandam@gmail.com", ""), Str ")"]
 ,Para [RawInline (Format "html") "<!-- TOC -->"]
 ,Div ("toc", [], []) [Para [Str "\t\t", Link ("", [], []) [Str "1.", Space, Strong [Str "Identify", Space, Str "where", Space, Str "a", Space, Str "UCE", Space, Str "loci", Space, Str "is", Space, Str "found", Space, Str "in", Space, Str "the", Space, Str "genome"]] ("#header-n513",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "1a.", Space, Strong [Str "baltq.sh", Space, Str "the", Space, Str "probes"], Space, Str "to", Space, Str "find", Space, Str "where", Space, Str "they", Space, Str "are", Space, Str "hiding", Space, Str "in", Space, Str "the", Space, Str "\"base", Space, Str "genome\""] ("#header-n18",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "2.", Space, Str "Now", Space, Str "we", Space, Str "are", Space, Str "going", Space, Str "to", Space, Strong [Str "insert", Space, Str "introns", Space, Str "into", Space, Str "the", Space, Str "general", Space, Str "feature", Space, Str "format", Space, Str "(GFF)", Space, Str "file"], Space, Str "of", Space, Str "the", Space, Str "\"base", Space, Str "genome\""] ("#header-n28",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "3.", Space, Strong [Str "Match", Space, Str "the", Space, Str "results", Space, Str "from", Space, Str "blastq", Space, Str "with", Space, Str "genomic", Space, Str "GFF", Space, Str "data"]] ("#header-n34",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "3a.", Space, Strong [Str "Writing", Space, Str "the", Space, Str "files", Space, Str "you", Space, Str "have", Space, Str "identified", Space, Str "to", Space, Str "concatenate", Space, Str "by", Space, Str "gene"]] ("#header-n87",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "4.", Space, Strong [Str "Organizing", Space, Str "files", Space, Str "for", Space, Str "phylogentic", Space, Str "analyses"]] ("#header-n111",""),LineBreak,Str "\t\t", Link ("", [], []) [Str "5.", Space, Strong [Str "Round", Space, Str "up", Space, Str "the", Space, Str "bootstrap", Space, Str "files", Space, Str "paths", Space, Str "and", Space, Str "best", Space, Str "tree", Space, Str "files", Space, Str "for", Space, Str "ASTRAL"]] ("#header-n393","")]]
 ,Para [RawInline (Format "html") "<!-- /TOC -->"]
 ,Para [Str ""]
 ,Header 3 ("header-n513", [], []) [Str "1.", Space, Strong [Str "Identify", Space, Str "where", Space, Str "a", Space, Str "UCE", Space, Str "loci", Space, Str "is", Space, Str "found", Space, Str "in", Space, Str "the", Space, Str "genome"]]
 ,Para [Str "First", Space, Str "we", Space, Str "need", Space, Str "to", Space, Str "extract", Space, Str "the", Space, Str "base", Space, Str "genome's", Space, Str "probes", Space, Str "from", Space, Str "the", Space, Emph [Str ".fasta"], Space, Str "probe", Space, Str "file", Space, Str "generated", Space, Str "by", Space, Str "PHYLUCE.", Space, Str "We", Space, Str "will", Space, Str "use", Space, Str "the", Space, Emph [Str "get", Emph [Str "individual"], Str "probes", Emph [Str "from"], Str "list.sh"], Space, Str "script", Space, Str "below.", Space, Str "You", Space, Str "will", Space, Str "need", Space, Str "to", Space, Str "run", Space, Str "this", Space, Str "in", Space, Str "the", Space, Str "terminal.", Space]
 ,CodeBlock ("",["shell"],[]) "########################## get_individual_probes_from_list.sh ############################\n\n## open terminal tab change directory to where your bait files are, type pwd to see full copy and change the below path in script to match yours\n \n nano get_individual_probes_from_list.sh\n\n## paste in below, modify your path for your bait file & the taxon e.g. \"athros1\"\n\n\ncritter=$1\n[ -z $1 ] && critter=athros1\n\nawk -v critter=$critter 'BEGIN{re=\"^>.*\" critter \"[0-9]*\"}\n     $0 ~ re {in_probe=1; print; next}\n     /^>/ {in_probe=0}\n     in_probe {print}' /home/hymv2baitsetfilescomplete/hymenoptera-v2-PRINCIPAL-bait-set.fasta.txt\n\n\n######### exit nano Ctrl + o, \"return\", Ctrl + x\n\nchmod 775 get_individual_probes_from_list.sh\n##########################################################\n###\n"
 ,Para [Str ""]
 ,Para [Str "You", Space, Str "will", Space, Str "need", Space, Str "to", Space, Str "modify", Space, Str "what", Space, Str "\"critter\"", Space, Str "you", Space, Str "want", Space, Str "to", Space, Str "by", Space, Str "its", Space, Str "name", Space, Str "in", Space, Str "the", Space, Str "fasta", Space, Str "header", Space, Str "in", Space, Str "the", Space, Str "probe", Space, Str "file", Space, Str "e.g.", Space, Str "\"", Emph [Str "critter=athros1"], Str "\"."]
 ,CodeBlock ("",["shell"],[]) ">uce-125_p10 |design:hymenoptera-v2,designer:faircloth,probes-locus:uce-125,probes-probe:10,probes-source:athros1,probes-global-chromo:KB467657.1,probes-global-start:99052,probes-global-end:99172,probes-local-start:40,probes-local-end:160"
 ,Para [Space, Str "In", Space, Str "addtion", Space, Str "change", Space, Str "the", Space, Str "last", Space, Str "line", Space, Str "of", Space, Str "the", Space, Str "\"", Emph [Str "get", Emph [Str "individual"], Str "probes", Emph [Str "from"], Str "list.sh"], Str "\"", Space, Str "to", Space, Str "the", Space, Str "path", Space, Str "of", Space, Str "your", Space, Str "probe", Space, Str "set,", Space, Str "typically", Space, Str "I", Space, Str "would", Space, Str "use", Space, Str "the", Space, Str "full", Space, Str "path.", Space, Str "To", Space, Str "run", Space, Str "the", Space, Str "script", Space, Str "and", Space, Str "save", Space, Str "output", Space, Str "simply", Space, Str "run", Space, Str "by", Space, Str "(this", Space, Str "assumes", Space, Str "it", Space, Str "is", Space, Str "in", Space, Str "your", Space, Str "current", Space, Str "working", Space, Str "directory)."]
 ,CodeBlock ("",["shell"],[]) "./get_individual_probes_from_list.sh > athros1_individual_probes.fasta"
 ,Para [Str "Now", Space, Str "you", Space, Str "should", Space, Str "have", Space, Str "a", Space, Str "new", Space, Str "file", Space, Str "called", Space, Str "\"", Emph [Str "apimel4", Emph [Str "individual"], Str "probes.fasta"], Str "\"", Space, Str ".", Space, Str "If", Space, Str "you", Space, Str "want", Space, Str "to", Space, Str "list", Space, Str "the", Space, Str "files", Space, Str "by", Space, Str "date", Space, Str "modified", Space, Str "in", Space, Str "your", Space, Str "directory", Space, Str "type", Space]
 ,CodeBlock ("",["shell"],[]) "ls -lhtr"
 ,Para [Str "This", Space, Str "will", Space, Str "be", Space, Str "helpfull", Space, Str "when", Space, Str "you", Space, Str "have", Space, Str "alot", Space, Str "of", Space, Str "files", Space, Str "generated", Space, Str "and", Space, Str "you", Space, Str "want", Space, Str "to", Space, Str "find", Space, Str "the", Space, Str "most", Space, Str "recent", Space, Str "one", Space, Str "in", Space, Str "the", Space, Str "shell.", Space]
 ,Para [Str ""]
 ,Header 3 ("header-n18", [], []) [Str "1a.", Space, Strong [Str "baltq.sh", Space, Str "the", Space, Str "probes"], Space, Str "to", Space, Str "find", Space, Str "where", Space, Str "they", Space, Str "are", Space, Str "hiding", Space, Str "in", Space, Str "the", Space, Str "\"base", Space, Str "genome\""]
 ,Para [Str "Get", Space, Str "blatq.sh", Space, Str "and", Space, Str "install", Space, Str "first", Space, Str "https://github.com/calacademy-research/BLATq"]
 ,Para [Str "Then", Space, Str "run", Space, Str "as", Space, Str "follows", Space, Str "blatq.sh", Space, Str "\"genome.fasta\"", Space, Str "\"individual-probes.fasta\"", Space, Str "\"output", Space, Str "file.m8\"."]
 ,CodeBlock ("",["shell"],[]) "blatq.sh GCA_000344095.2_Aros_2.0_genomic.fna athros1_individual_probes.fasta athros_to_athros-uce-probes-matches.m8"
 ,Para [Str ""]
 ,Header 3 ("header-n28", [], []) [Str "2.", Space, Str "Now", Space, Str "we", Space, Str "are", Space, Str "going", Space, Str "to", Space, Strong [Str "insert", Space, Str "introns", Space, Str "into", Space, Str "the", Space, Str "general", Space, Str "feature", Space, Str "format", Space, Str "(GFF)", Space, Str "file"], Space, Str "of", Space, Str "the", Space, Str "\"base", Space, Str "genome\""]
 ,Para [Str "You", Space, Str "can", Space, Str "typically", Space, Str "find", Space, Str "these", Space, Str "annotation", Space, Str "files", Space, Str "from", Space, Str "genbank.", Space, Str "Here", Space, Str "you", Space, Str "will", Space, Str "want", Space, Str "to", Space, Str "locate", Space, Str "the", Space, Strong [Str "RefSeq"], Space, Str "assembly", Space, Str "for", Space, Str "your", Space, Str "taxon,", Space, Str "and", Space, Str "dowload", Space, Str "the", Space, Str "\"", Strong [Str "genomic.gff.gz"], Str "\"", Space, Str "file", Space, Str "and", Space, Str "unzip", Space, Str "it", Space, Str "into", Space, Str "your", Space, Str "directory.", Space, Str "Once", Space, Str "you", Space, Str "have", Space, Str "it,", Space, Str "the", Space, Str "introns", Space, Str "can", Space, Str "then", Space, Str "be", Space, Str "inserted", Space, Str "into", Space, Str "the", Space, Str "file.", Space, Str "This", Space, Str "in", Space, Str "not", Space, Str "nessessary", Space, Str "to", Space, Str "do", Space, Str "for", Space, Str "matching", Space, Str "the", Space, Str "UCEs", Space, Str "to", Space, Str "genes", Space, Str "in", Space, Str "the", Space, Str "GFF,", Space, Str "but", Space, Str "will", Space, Str "come", Space, Str "in", Space, Str "handy", Space, Str "when", Space, Str "you", Space, Str "want", Space, Str "to", Space, Str "get", Space, Str "fancy", Space, Str "with", Space, Str "partitioning", Space, Str "or", Space, Str "categorizing", Space, Str "the", Space, Str "UCEs", Space, Str "by", Space, Str "feature", Space, Str "(intronic,", Space, Str "exonic,", Space, Str "intergenic)."]
 ,Para [Str "Below", Space, Str "is", Space, Strong [Str "R"], Space, Str "the", Space, Str "code", Space, Str "we", Space, Str "used", Space, Str "in", Space, Str "the", Space, Str "paper", Space, Str "(link)", Space, Str "and", Space, Str "we", Space, Str "have", Space, Str "an", Space, Str "updated", Space, Str "version", Space, Str "of", Space, Str "the", Space, Str "code", Space, Str "here", Space, Str "(link).", Space, Str "It", Space, Str "has", Space, Str "been", Space, Str "tested", Space, Str "on", Space, Str "linux.", Space]
 ,Para [Str ""]
 ,CodeBlock ("",["r"],[]) "# interminal type R\n\n####################################### tetrapod UCEs CHICKEN\n\n#set your working direcoty and read in some R libraries \n\nsetwd(\"~/data/synteny/bird_genomes/annotations\")\nlibrary(gdata)\nlibrary(ape)\nlibrary(ips)\nlibrary(dplyr)\nlibrary(parallel)\n\n\n##########################################################\n################################################   \n################ read in .gff and insert introns by gene\n################################################   \n##########################################################\n\n\ngff = read.gff('~/annotations/GCF_000002315.4_Gallus_gallus-5.0_genomic.gff', na.strings = c(\".\", \"?\"))  ## make sure it is refseq version of gff\n\ngff_mod = gff\n\ngeneID =list()\nfor (i in 1:nrow(gff_mod)){\ngeneID[[i]] = unlist(strsplit(as.character(gff_mod[i,9]), \"[;]\", perl=TRUE ))[1]\n}\n\ngff_mod = gff_mod[,-9]\n\n\ngff_mods = cbind(gff_mod, unlist(geneID))\n \ngenerange = cbind(as.numeric(as.character(gff_mods$start)) , as.numeric(as.character(gff_mods$end))) \ngenerange_max = apply(generange, 1, max)\ngenerange_min = apply(generange, 1, min)\n \ngff_mods =  cbind(gff_mods, generange_min, generange_max)\n\ngff_mods$newcolumn = \"n\"\n\ncurgeneid = \"n\"\n\nclass(curgeneid)\ngff_mods = data.frame(gff_mods, stringsAsFactors = FALSE)\ngff_mods[,9] = as.character(gff_mods[,9])\n\n##### this can take a few hours\nfor (i in 1:nrow(gff_mods)){ \n\n\tif(gff_mods[i,3 ]==\"gene\"){\n\t\tcurgeneid = gff_mods[i,9 ]\n\t}\n\tgff_mods[i, 12]= curgeneid \n\tprint(row.names(gff_mods[i,]))\t\n}\n##### \n\n\n##### this can take a few hours\n\n make_geneid = function(dataframes) {\n dataframes =  gff_mods\n for (i in 1:nrow(dataframes )){ \n\tif(dataframes[i,3 ]==\"gene\"){\n\t\tcurgeneid = dataframes[i,9 ]\n\t}\n\tdataframes[i, 12]= curgeneid \t\n\tprint(row.names(dataframes[i,]))\n}}\n\n\nmclapply(gff_mods, make_geneid, mc.cores=getOption(\"mc.cores\", 93))\n\nwrite.csv(gff_mods, file=\"gff_mods_complete.csv\")\n\n##### \n\n\nexons = gff_mods[gff_mods[,3]==\"exon\",]\n\nby_gene_intron_exon = data.frame(stringsAsFactors =F)\nby_gene_intron_exonL =  data.frame(stringsAsFactors =F)\nby_gene_intron_exonLsigs = data.frame(stringsAsFactors =F)\nintron = data.frame(stringsAsFactors =F)\n\n###have to deal with trna and rna exons, then read back in \n\ngff_mods = read.csv(\"test_gff_mods.csv\", header=TRUE, stringsAsFactors = FALSE)\nrow.names(gff_mods)= gff_mods$X\ngff_mods = gff_mods[,-1]\n\n##########################################################\n################################################   \n########### if much more than 20,000 genes in .gff you may want to break this up into parallel runs, if it gets bogged down \n################################################   \n################################################## insert introns into genes \n\t\t\ngene_exons = gff_mods[gff_mods[,3]==\"exon\", ]\n\nfor (i in 1:1440027){\n\t        #1440104 number of rows to go through \n\t\t\n## find a gene's start & stop range and extract the exons it contains\n\tif(gff_mods[i,3 ]==\"gene\"){\n\tgene_exons_start = as.numeric(as.character(gff_mods[i, 10]))\n\tgene_exons_end = as.numeric(as.character(gff_mods[i, 11])) \n\tgene_exons_startID = substr(gff_mods[i, 12], 1, 13)\n\tgene_exone_startID = substr(gff_mods[i, 12], 1, 13)\n          \n   gene_exons_alls = gene_exons[gene_exons[, 10]==gene_exons_start , ]\n    if(nrow(gene_exons_alls) < 1  ) next # bail if no exon in gene for \"pseudogenes\" \n    \t\n  gene_exons_alls = gene_exons_alls[substr(gene_exons_alls[, 12],1,13)==gene_exons_startID, ]\n  \n  \n               if(length(row.names(gene_exons[gene_exons[, 11]==gene_exons_end , ])) < 1 ){\n               \tgene_exons_end = as.numeric(as.character(gff_mods[i+1, 11]))\n               \n               }\n  \n  gene_exons_alle = gene_exons[gene_exons[, 11]==gene_exons_end , ] \n   gene_exons_alle = gene_exons_alle[substr(gene_exons_alle[, 12],1,13)==gene_exone_startID, ]\n\t\t\t\n\t\tif(nrow(gene_exons_alle) > 1  ){ ### deal with  duplicates & alternative splicings\n\t\t\tgene_exons_alle = gene_exons_alle[nrow(gene_exons_alle),]\n\t\t\tgene_exons_alles = \tgene_exons[as.character(as.numeric(rownames(gene_exons_alls):as.numeric(rownames(gene_exons_alle)))), ]\n\t\t\t# remove any NA rows generated \n  \tgene_exons_alles = gene_exons_alles[complete.cases(gene_exons_alles[ , 10]), ]\n  \t\t\t#get all unique pairs, removes duplicate pairs\n  \tgene_exons_alles = gene_exons_alles %>% distinct(gene_exons_alles, generange_min, generange_max, .keep_all = TRUE)\n\n\t\t}else {\n\tgene_exons_alles = gene_exons[as.character(as.numeric(rownames(gene_exons_alls):as.numeric(rownames(gene_exons_alle)))), ] \n}\n \n    gene_exons_alles = gene_exons_alles[order(gene_exons_alles[,10]), ]\n    colnames(gene_exons_alles)[9:12] = c(\"geneID\", \"start1\", \"end1\", \"geneID1\")\n    ### now deal with alternative overlapping splicings\n\t\t\tif(sum(duplicated(gene_exons_alles[,10]), na.rm=TRUE) | sum(duplicated(gene_exons_alles[,11]), na.rm=TRUE) >= 1  ){\n\t\t\t\tgene_exons_alles = as.data.table(gene_exons_alles)\n\t\t\t\tif(sum(duplicated(gene_exons_alles[,10]), na.rm=TRUE) >= 1){\n\n\t\t\t\tgene_exons_alles = gene_exons_alles[ , .SD[end1 == max(end1)], by = start1]\n## for what the the .SD means see https://stackoverflow.com/questions/8508482/what-does-sd-stand-for-in-data-table-in-r\n\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\tif(sum(duplicated(gene_exons_alles[,11]), na.rm=TRUE) >= 1){\n\t\t\t\tgene_exons_alles = \tgene_exons_alles[ , .SD[start1 == min(start1)], by = end1]\n\t\t\t\t\t}\n\t\t\t\t\tsetcolorder(gene_exons_alles, c(\"seqid\", \"source\", \"type\", \"start\", \"end\", \"score\", \"strand\", \"phase\", \"geneID\", \"start1\", \"end1\", \"geneID1\" ))\n\t\t\t\t\tgene_exons_alles = as.data.frame(gene_exons_alles, stringsAsFactors = FALSE)\n\t\t\t\t}\t\t\t\t\n            \nintron = gene_exons_alles\nintron = intron[-nrow(intron), ]\nif(nrow(intron) >=1 ){ \nintron[,1] = as.character(intron[,1])\n}else {\n\t}\n\nintron = data.frame(lapply(intron, as.character), stringsAsFactors=FALSE)\nintron[, 4] = as.numeric(intron[, 4])\nintron[, 5] = as.numeric(intron[, 5])\nintron[, 10] = as.numeric(intron[, 10])\nintron[, 11] = as.numeric(intron[, 11])\n\n\n## now working only with rows that contain exons of a gene, if # of rows longer than 1, insert intron if exons are non-consecutive\n if(nrow(gene_exons_alles)-1 >=1){\n \t\n \t#gene_exons_alles[with(ranges, startgene <= startUCE & endgene >= endUCE), ]\n \t\n       for (i in 1:(nrow(gene_exons_alles)-1))  { ##  for number of exons -1, as after end of last exon is intergenic\n    \t\t\t\n    \t\t\tprint(gene_exons_alles[i,])\n\t\t\t\tintron_start = as.numeric(as.character(gene_exons_alles[i, 11]))+1\n\t\t\t\tintron_end = as.numeric(as.character(gene_exons_alles[i+1, 10]))-1\n\t\t\t\t#intron[i,1]=gene_exons_alles$V1 \n\t\t\t\tintron[i,3]=\"intron\"\n\t\t\t\tintron[i,4]=intron_start\n\t\t\t\tintron[i,10]=intron_start\n\t\t\t\tintron[i,5]=intron_end\n\t\t\t\tintron[i,11]=intron_end\n\t      \t}\n          by_gene_intron_exon =  rbind(data.frame(gene_exons_alles), intron)\n  \n     }\n      \n              else {\n\t     \tby_gene_intron_exon_sigs = rbind(gene_exons_alles)  ## no rb \n\t     \tprint(by_gene_intron_exon)\n\t     \tprint(\"IIIIINNNNTTTTTTRRRROOONNNN!!IS!!NNNNAAAAA\")\n\t     \tby_gene_intron_exonLsigs = bind_rows(by_gene_intron_exonLsigs, by_gene_intron_exon_sigs)\n\t     #\t## notes from testing trouble shooting ##  #\n                  #by_gene_intron_exonLsigs= cbind(by_gene_intron_exonLsigs, as.numeric(as.character(by_gene_intron_exonLsigs[,4])))\n\t     \t#by_gene_intron_exonLsigs= cbind(by_gene_intron_exonLsigs, as.numeric(as.character(by_gene_intron_exonLsigs[,5])))\n\t      \t}\n\t   by_gene_intron_exonL = bind_rows(by_gene_intron_exonL, by_gene_intron_exon)\n \t\t\t# by_gene_intron_exonL[[i]] =  by_gene_intron_exon\n \t\t\t\n      } }\n      \n\n\nby_gene_intron_exonLDFs = rbind(by_gene_intron_exonL, by_gene_intron_exonLsigs)  \n\n\n\nwrite.csv(by_gene_intron_exonLDFs, file=\"by_gene_intron_exonL_tetrapods.csv\")\n\n\n"
 ,Para [Str ""]
 ,Para [Str ""]
 ,Header 3 ("header-n34", [], []) [Str "3.", Space, Strong [Str "Match", Space, Str "the", Space, Str "results", Space, Str "from", Space, Str "blastq", Space, Str "with", Space, Str "genomic", Space, Str "GFF", Space, Str "data"]]
 ,Para [Str "Here", Space, Str "we", Space, Str "will", Space, Str "use", Space, Strong [Str "R"], Space, Str "to", Space, Str "match", Space, Str "the", Space, Str "two", Space, Str "datasets", Space, Str "together,", Space, Str "use", Space, Str "the", Space, Str "csv", Space, Str "result", Space, Str "from", Space, Str "above.", Space, Str "The", Space, Str ".csv", Space, Str "should", Space, Str "look", Space, Str "something", Space, Str "like", Space, Str "the", Space, Str "example", Space, Str "below."]
 ,CodeBlock ("",["shell"],[]) "head by_gene_intron_exonL_tetrapods.csv\n\n\"\",\"seqid\",\"source\",\"type\",\"start\",\"end\",\"score\",\"strand\",\"phase\",\"geneID\",\"start1\",\"end1\",\"geneID1\"\n\"1\",\"NC_006088.4\",\"Gnomon\",\"exon\",117,317,NA,\"+\",NA,\"ID=id1\",117,317,\"ID=gene0\"\n\"2\",\"NC_006088.4\",\"Gnomon\",\"exon\",1677,1769,NA,\"+\",NA,\"ID=id2\",1677,1769,\"ID=gene0\"\n\"3\",\"NC_006088.4\",\"Gnomon\",\"exon\",1977,2027,NA,\"+\",NA,\"ID=id3\",1977,2027,\"ID=gene0\"\n\"4\",\"NC_006088.4\",\"Gnomon\",\"exon\",2030,2157,NA,\"+\",NA,\"ID=id4\",2030,2157,\"ID=gene0\"\n\"5\",\"NC_006088.4\",\"Gnomon\",\"exon\",2352,2458,NA,\"+\",NA,\"ID=id5\",2352,2458,\"ID=gene0\"\n\"6\",\"NC_006088.4\",\"Gnomon\",\"exon\",2548,2861,NA,\"+\",NA,\"ID=id6\",2548,2861,\"ID=gene0\"\n\"7\",\"NC_006088.4\",\"Gnomon\",\"intron\",318,1676,NA,\"+\",NA,\"ID=id1\",318,1676,\"ID=gene0\"\n\"8\",\"NC_006088.4\",\"Gnomon\",\"intron\",1770,1976,NA,\"+\",NA,\"ID=id2\",1770,1976,\"ID=gene0\"\n\"9\",\"NC_006088.4\",\"Gnomon\",\"intron\",2028,2029,NA,\"+\",NA,\"ID=id3\",2028,2029,\"ID=gene0\"\n"
 ,Para [Str ""]
 ,CodeBlock ("",["r"],[]) "##########################################################\n################################################   \n################ now match UCEs to GFF exons-introns by gene-ID\n################################################   \n##########################################################\n#set your working direcoty and read in some R libraries \n\nsetwd(\"~/data/synteny/bird_genomes/annotations\")\nlibrary(gdata)\nlibrary(ape)\nlibrary(ips)\nlibrary(dplyr)\nlibrary(parallel)\n\n## get a filtered m8 file of UCE blastq hist to the genome\ngff_mods = read.csv(\"test_gff_mods.csv\", header =T)\ngff_mods = gff_mods[,-1]\n\n### find replace \" with nothing and same for spaces in file\nfh = read.table('Tetrapods_5K_individual_probes_chicken.m8')\n\nm8table_filt = fh[(fh[,3]>99.0 & fh[,4]>119.0), ]\nwrite.table(m8table_filt, file=\"filt2_noNT.m8\", sep=\"\\t\")\n#nrow(m8table_filt) #should be same as number of probes for the base taxon, assuming this is on the base taxon\n\nm8table_filt = read.table(\"~/annotations/filt2_noNT.m8\", sep=\"\\t\")\n\n## get range by scaffold\nUCE_range = m8table_filt[,c(2,1, 9:10)]\ngene_ranges = gff_mods[gff_mods[,3 ]==\"gene\", c(1,9, 10:11)]\ncolnames(UCE_range) = c(\"scaffold\", \"feature\", \"start\", \"end\")\ncolnames(gene_ranges) = c(\"scaffold\", \"feature\",\"start\", \"end\")\n\n#check make sure all start cols less than end cols\ngene_ranges[gene_ranges$\"start\" > gene_ranges$\"end\", c(\"scaffold\", \"feature\",\"start\", \"end\")] <- gene_ranges[gene_ranges$\"start\" > gene_ranges$\"end\",  c(\"scaffold\", \"feature\",\"end\", \"start\")] \n#gene_ranges\n\nUCE_range = UCE_range[order(UCE_range[,1], UCE_range[,3]), ]\ngene_ranges = gene_ranges[order(gene_ranges[,1], gene_ranges[,3]), ]\n\n##match UCE interval with Gene interval\n\nranges = merge(UCE_range, gene_ranges, by=\"scaffold\", suffixes=c(\"UCE\", \"gene\"))\noverlap = ranges[with(ranges, startgene <= startUCE & endgene >= endUCE), ]\n\nnrow(overlap)\n#3296\nwrite.csv(overlap, file=\"gene_UCE_overlap_birds.csv\")\n\ngene_ranges = gene_ranges[order(gene_ranges[,1], gene_ranges[,3]), ]\n\norder_by_geneID = overlap[order(overlap[,5], overlap[,2]), ]\n\nsapply(order_by_geneID, function(x) length(unique(x)))\n \nunique_genes = unique(order_by_geneID$featuregene)\n\nget_unique_UCE_order_by_geneID = data.frame(lapply(order_by_geneID, as.character), stringsAsFactors=FALSE)\nget_unique_UCE_order_by_geneID[] = lapply(get_unique_UCE_order_by_geneID, as.character)\nget_unique_UCE_order_by_geneID = apply(get_unique_UCE_order_by_geneID, 2 , function(y) gsub(\"_p10\", \"\", y))\nget_unique_UCE_order_by_geneID = apply(get_unique_UCE_order_by_geneID, 2 , function(y) gsub(\"_p9\", \"\", y))\nget_unique_UCE_order_by_geneID = apply(get_unique_UCE_order_by_geneID, 2 , function(y) gsub(\"_p8\", \"\", y))\nget_unique_UCE_order_by_geneID = apply(get_unique_UCE_order_by_geneID, 2 , function(y) gsub(\"_p7\", \"\", y))\nget_unique_UCE_order_by_geneID = apply(get_unique_UCE_order_by_geneID, 2 , function(y) gsub(\"_p6\", \"\", y))\nget_unique_UCE_order_by_geneID = apply(get_unique_UCE_order_by_geneID, 2 , function(y) gsub(\"_p5\", \"\", y))\nget_unique_UCE_order_by_geneID = apply(get_unique_UCE_order_by_geneID, 2 , function(y) gsub(\"_p[0-9]\", \"\", y))\nget_unique_UCE_order_by_geneID = apply(get_unique_UCE_order_by_geneID, 2 , function(y) gsub(\"_p[0-9]\", \"\", y))\n\nget_unique_UCE_order_by_geneID = data.frame(get_unique_UCE_order_by_geneID, stringsAsFactors=FALSE)\nget_unique_UCE_order_by_geneID = get_unique_UCE_order_by_geneID[!duplicated(get_unique_UCE_order_by_geneID$featureUCE), ]\n                              \nwrite.csv(get_unique_UCE_order_by_geneID, file=\"ONLY_unique_UCE_order_by_geneID.csv\")\n\nget_unique_UCE_order_by_geneID = read.csv(\"ONLY_unique_UCE_order_by_geneID.csv\")\nget_unique_UCE_order_by_geneID = get_unique_UCE_order_by_geneID[,-1]\n\nget_unique_UCE_order_by_geneIDList = cbind(as.character(get_unique_UCE_order_by_geneID[,2]), as.character(get_unique_UCE_order_by_geneID[,5]))\nget_unique_UCE_order_by_geneIDList = data.frame(get_unique_UCE_order_by_geneIDList)\n#unique(get_unique_UCE_order_by_geneIDList[,2])\n#2958 \n\n\ngenes_to_concat = list()\nunique_genes_list = unique(get_unique_UCE_order_by_geneIDList[,2])\nfor(i in 1:length(unique(get_unique_UCE_order_by_geneIDList[,2]))){\n\tgenes_to_concat[[i]] = get_unique_UCE_order_by_geneIDList[get_unique_UCE_order_by_geneIDList[,2]==unique_genes_list[i], ]\n}\n\n\ngenes_to_concat_keepers = list()\nfor(i in 1:length(genes_to_concat)){\nif(nrow(genes_to_concat[[i]])>1){\n\tgenes_to_concat_keepers[[i]] = genes_to_concat[[i]]\n\t} else {\n\t   \t  print(\"do NA\")\n}}\n\ngenes_to_concat_keepers[sapply(genes_to_concat_keepers, is.null)] = NULL\nlength(genes_to_concat_keepers)\n\ngene_to_be_concatted = genes_to_concat_keepers\ngene_to_be_concatted = lapply(gene_to_be_concatted, function(x) { x[[1]] = as.character(x[[1]]) })\n#\n############ now write each set into its own dir and concat\n\ngene_to_be_concatted_file_set = lapply(gene_to_be_concatted, function(x) { x = paste(x, \".phylip\", sep=\"\") })\n\ndir.create(\"nexus_for_concat\")\n\n## don't close R down just yet, we will use these objecs down below\n"
 ,Para [Str ""]
 ,Header 3 ("header-n87", [], []) [Str "3a.", Space, Strong [Str "Writing", Space, Str "the", Space, Str "files", Space, Str "you", Space, Str "have", Space, Str "identified", Space, Str "to", Space, Str "concatenate", Space, Str "by", Space, Str "gene"]]
 ,Para [Str "At", Space, Str "this", Space, Str "point", Space, Str "you", Space, Str "should", Space, Str "have", Space, Str "identified", Space, Str "the", Space, Str "files", Space, Str "(UCEs)", Space, Str "that", Space, Str "are", Space, Str "within", Space, Str "a", Space, Str "gene", Space, Str "and", Space, Str "now", Space, Str "actually", Space, Str "need", Space, Str "to", Space, Str "concatenate", Space, Str "those", Space, Str "files", Space, Str "and", Space, Str "put", Space, Str "them", Space, Str "into", Space, Str "directories,", Space, Str "so", Space, Str "things", Space, Str "will", Space, Str "not", Space, Str "get", Space, Str "too", Space, Str "crazy", Space, Str "all", Space, Str "in", Space, Str "one", Space, Str "directory,", Space, Str "as", Space, Str "you", Space, Str "may", Space, Str "have", Space, Str "thousands", Space, Str "of", Space, Str "loci", Space, Str "and", Space, Str "will", Space, Str "run", Space, Str "thousands", Space, Str "or", Space, Str "analyses", Space, Str "it", Space, Str "will", Space, Str "be", Space, Str "very", Space, Str "difficult", Space, Str "to", Space, Str "easily", Space, Str "find", Space, Str "where", Space, Str "things", Space, Str "are.", Space, Str "So,", Space, Str "I", Space, Str "like", Space, Str "to", Space, Str "put", Space, Str "each", Space, Str "UCE", Space, Str "or", Space, Str "concatenated", Space, Str "set", Space, Str "of", Space, Str "UCEs", Space, Str "(those", Space, Str "found", Space, Str "in", Space, Str "a", Space, Str "gene", Space, Str "like", Space, Str "those", Space, Str "found", Space, Str "above)", Space, Str "into", Space, Str "its", Space, Str "own", Space, Str "directory.", Space, Str "It", Space, Str "also", Space, Str "makes", Space, Str "moving", Space, Str "those", Space, Str "directories", Space, Str "around", Space, Str "easier."]
 ,CodeBlock ("",["r"],[]) "\n\nprocessFilelength <- function(f) {\n    #df <- read.phy(f)\n    df = read.nex(f)\n}\n        \n                                       \n# !!!!!\n # !!!!! read in nexus indidividula alignemtns made by PHYLUCE these should be in one #directory !!!!!\n# !!!!!\n                                       \n                                       \nfiles = dir(\".\", recursive=TRUE, full.names=TRUE, pattern=\"\\\\.nexus$\")\n#if not too many nexus alignments\nresult = sapply(files, processFilelength) \n#if thousands of nexus alignments\nresults =  mclapply(files, read.nex, mc.cores=getOption(\"mc.cores\", 16))                                  \n\n#make names for rewritng nexus to phylip\nnamess = files\nnamess = gsub(\".nexus\",\".phylip\",namess)\nnamess = gsub(\"./\",\"\",namess)\n\n#now write .nexus files to .phylip into a directory\nfor (i in 1:length(result)) {\n    namess[[i]] = paste(\"/synteny/nexus_for_concat/\", namess[[i]], sep=\"\")\n    write.phy(result[[i]], file=namess[[i]], interleave=F)\n}\n\n                                       \n\nmatches=list()\nsumlist = list()\nphylip_file_list = list.files(path = \".\", pattern = \".phylip$\")\ndirlist=list()\nfor(i in 1:length(gene_to_be_concatted_file_set)){\nmatches[[i]] = gene_to_be_concatted_file_set[[i]] %in% phylip_file_list\n }\n for(i in 1:length(gene_to_be_concatted_file_set)){\nif(length(which(matches[[i]]==TRUE)) > 1){\ndirlist[[i]] = paste(\"concat_set\",\"_\",i, sep=\"\")\ndir.create(dirlist[[i]])\n\n} else {\n\tprint(\"file_list_too_short\")\n\tprint(gene_to_be_concatted_file_set[[i]])\n} }\n\nFINAL_gene_to_be_concatted_file_set = list()\nfor(i in 1:length(gene_to_be_concatted_file_set)){\nif(length(which(matches[[i]]==TRUE)) > 1){\n\tFINAL_gene_to_be_concatted_file_set[[i]] = gene_to_be_concatted_file_set[[i]]\n}\n}\n\nFINAL_gene_to_be_concatted_file_set[sapply(FINAL_gene_to_be_concatted_file_set, is.null)] = NULL\n\ndir_list = list.dirs(path = \".\", recursive = FALSE)\ndir_list =dir_list[-c(406:407)] ### ! this is to remove any other directories from the list that may be in your dir if you don't have any other spurious dirs in your lint no need to run this line\n\nfor(i in 1:length(FINAL_gene_to_be_concatted_file_set)){\nfile.copy(FINAL_gene_to_be_concatted_file_set[[i]], dir_list[i])\n}\n\n                                       \nfilePATH_list=list()\nfor(i in 1:length(dir_list)){\n\tfilePATH_list[[i]] = list.files(path = dir_list[i], pattern=\"*.phylip\", full.names = TRUE, recursive = TRUE)\n\t\n\t}\n\t\n\tfilePATH_list[lapply(filePATH_list,length)>0] \n\ngene_to_be_concatted_file_set_fin_NEXUS = lapply(filePATH_list, function(x) { x = paste(x, \".nexus\", sep=\"\") })\n\n\n\n\ntest = unlist(gene_to_be_concatted_file_set_fin_NEXUS)\nto_rm = c(\".nexus\")\n#\ntest = setdiff(test, to_rm)\n\n## write the phylips into nexus for concatenation in PHYLUCE\ntest_file_to_write = unlist(filePATH_list)\nfor(i in 1:length(test)){\n\tonetowrite = read.phy(test_file_to_write[i])\n\twrite.nex(onetowrite , test[i])\n}\n\n\n                                       \n### concatinate each nexus in the dirs created with PHYLUCE magic\n\n\n#R\n#setwd(\"~/annotations/nexus_for_concat/\")\nlibrary(ips)\nnex_files_list = list.files(pattern = \"phylip.nexus$\", recursive = TRUE)\ndir_list = list.dirs(path=\".\", recursive = FALSE)\ndir_list = dir_list[-c(406:407)] ### ! this is to remove any other directories you dont want\n\ncmd =list()\ndir_list = gsub(\"./\", \"\", dir_list)\n## change of directoty below as this was run on remote cluster\nfor(i in 1:length(dir_list)){\n\tnex = paste(\"/home/ubuntu/bird_phy_fin/phylip_files/\", dir_list[i], sep=\"\") ## you will have to modify to your working directory\n    \n\toutp = paste(nex,\"concat_partitionedbygene.phy\", sep=\"\")\n    subvcmd = paste(\"phyluce_align_format_nexus_files_for_raxml --alignments\", nex, \"--output\", outp, \"--charsets --log-path log\", sep=\" \")\n   subvcmd = gsub(\"[:.:]\", \"\", subvcmd)\n\ncmd[[i]] = subvcmd\n}\n\n\n## !!!!!!!!!\n ## !!!!!!!!! in terminal shell change ? to N , this is not done in R !!!!!!!!!!!!!!\n## !!!!!!!!!\n                                       \nmkdir log\n\n#### find replace all ? with N for files in dir\n\nfor dir in concat_set_*; do\ncd \"${dir}\"\n\nfor file in \"${dir}\"/*.phylip.nexus; do\n\nfind *.phylip.nexus -type f -exec sed -i 's/?/N/g' {} \\;\n\ncd ..\ndone\n\ndone\n\n\n#### !!!!!!! ################## back to R ########################## !!!!!!!!!!!!!!\n\nmclapply(cmd, system, mc.cores=getOption(\"mc.cores\", 3))\n                                       \n\n\n\n\n"
 ,Header 3 ("header-n111", [], []) [Str "4.", Space, Strong [Str "Organizing", Space, Str "files", Space, Str "for", Space, Str "phylogentic", Space, Str "analyses"]]
 ,Para [Str "Now", Space, Str "you", Space, Str "should", Space, Str "have", Space, Str "two", Space, Str "different", Space, Str "sets", Space, Str "of", Space, Str "directories", Space, Str "one", Space, Str "with", Space, Str "the", Space, Str "original", Space, Str "phylips", Space, Str "and", Space, Str "nexus", Space, Str "files", Space, Str "e.g.", Space, Strong [Str "concat", Emph [Str "set"], Str "99"], Space, Str "and", Space, Str "another", Space, Strong [Str "concat", Emph [Str "set"], Str "99concat_partitionedbygenephy"], Space, Str "with", Space, Str "the", Space, Emph [Str "concat", Emph [Str "set"], Str "99.charsets"], Space, Emph [Str "concat", Emph [Str "set"], Str "99.phylip"], Str ",", Space, Str "files.", Space, Str "Now", Space, Str "to", Space, Str "build", Space, Str "the", Space, Str "species", Space, Str "trees", Space, Str "we", Space, Str "need", Space, Str "to", Space, Str "take", Space, Str "or", Space, Str "make", Space, Str "a", Space, Str "list", Space, Str "of", Space, Str "the", Space, Str "files", Space, Str "that", Space, Str "got", Space, Str "concatenated", Space, Str "and", Space, Str "then", Space, Str "subtract", Space, Str "it", Space, Str "from", Space, Str "the", Space, Str "total", Space, Str "list", Space, Str "of", Space, Str "phylip", Space, Str "files.", Space, Str "Then", Space, Str "take", Space, Str "these", Space, Str "lists", Space, Str "and", Space, Str "feed", Space, Str "it", Space, Str "to", Space, Str "your", Space, Str "tree", Space, Str "building", Space, Str "method", Space, Str "of", Space, Str "choice,", Space, Str "here", Space, Str "we", Space, Str "will", Space, Str "use", Space, Str "RaxML.", Space]
 ,Para [Str "Below", Space, Str "is", Space, Str "the", Space, Str "shell", Space, Str "script", Space, Str "used", Space, Str "to", Space, Str "execute", Space, Str "RAxML", Space, Str "over", Space, Str "files", Space, Str "in", Space, Str "a", Space, Str "directory,", Space, Str "it", Space, Str "will", Space, Str "be", Space, Str "executed", Space, Str "in", Space, Str "a", Space, Str "loop,", Space, Str "in", Space, Str "R"]
 ,CodeBlock ("",["shell"],[]) "# !! open a terminal tab\n# change path to match your working directory in R you want to have this script in the wd\n############ run_RAxML.sh ##############################################\nnano run_RAxML.sh\n######### paste the below, modify how you like RAxML, especially your path \n\n#!/bin/bash\ncd $(dirname $1)\nid=$(basename $(dirname $1))\nphy=$(basename $1)\n#below are the RAxML commands, when in doubt give full path to where it lives\n/home/ubuntu/standard-RAxML-master/raxmlHPC-PTHREADS-AVX2 -f a -m GTRGAMMA -N 100 -x 12345 -p 25258 -n ${id}.best.tre -s $phy -T 6\n\n\n######### exit nano Ctrl + o, \"return\", Ctrl + x\n\nchmod 775 run_RAxML.sh\n##########################################################\n###\n"
 ,Para [Str "Now", Space, Str "back", Space, Str "to", Space, Str "R", Space, Str "in", Space, Str "terminal", Space]
 ,CodeBlock ("",["r"],[]) "###\nphy_files_list = list.files(pattern = \"concat_set_.*.phylip$\", recursive = TRUE, path = getwd(), full.names = TRUE)\n\ncmd =list()\n\nfor(i in 1:length(phy_files_list)){\n\ncmd[[i]] = paste(getwd(), \"/run_RAxML.sh \", phy_files_list[i], sep=\"\")\n\n}\n\n# make sure your system has 48 cores or change the 48 to an appropriate number of cores. Some of the concatented sets are long alignments, it may go a little slower for the short alignments using more cores than needed but really slow for the long ones using far too few, it goes quickly enough\n\nfinal_raxml = mclapply(cmd, system, mc.cores=getOption(\"mc.cores\", 8))  ### 6 X mc.cores 8 = 48 cores\n\n\n\n"
 ,Para [Str ""]
 ,Para [Str "Now", Space, Str "that", Space, Str "we", Space, Str "have", Space, Str "made", Space, Str "the", Space, Str "gene", Space, Str "trees", Space, Str "for", Space, Str "the", Space, Str "concatenated", Space, Str "UCEs", Space, Str "in", Space, Str "a", Space, Str "gene,", Space, Str "we", Space, Str "need", Space, Str "to", Space, Str "make", Space, Str "the", Space, Str "gene", Space, Str "trees", Space, Str "for", Space, Str "the", Space, Str "rest", Space, Str "plus", Space, Str "the", Space, Str "originals", Space, Str "\"those", Space, Str "individual", Space, Str "UCEs", Space, Str "that", Space, Str "got", Space, Str "concatenated", Space, Str "\".", Space]
 ,Para [Str "We", Space, Str "will", Space, Str "move", Space, Str "all", Space, Str "the", Space, Str "original", Space, Str "phylips", Space, Str "that", Space, Str "got", Space, Str "concatenated", Space, Str "into", Space, Str "their", Space, Str "own", Space, Str "directories.", Space, Str "Using", Space, Str "unix", Space, Str "script", Space, Str "that", Space, Str "can", Space, Str "be", Space, Str "simply", Space, Str "pasted", Space, Str "into", Space, Str "in", Space, Str "the", Space, Str "terminal,", Space, Str "this", Space, Str "is", Space, Str "not", Space, Str "strictly", Space, Str "necessary,", Space, Str "I", Space, Str "did", Space, Str "this", Space, Str "as", Space, Str "it", Space, Str "helped", Space, Str "later", Space, Str "in", Space, Str "comparisons", Space, Str "between", Space, Str "subsets", Space, Str "of", Space, Str "these", Space, Str "data.", Space]
 ,CodeBlock ("",["shell"],[]) "## unix terminal\nfor dir in concat_set_*; do\ncd \"${dir}\"\nfind . -name \"uce-*.phylip\" -exec sh -c 'NEWDIR=`basename \"$1new\" ` ; mkdir \"$NEWDIR\" ; mv \"$1\" \"$NEWDIR\" ' _ {} \\;\ncd ..\ndone\n\n"
 ,Para [Str ""]
 ,Para [Str "You", Space, Str "should", Space, Str "have", Space, Str "something", Space, Str "like", Space, Str "the", Space, Str "following", Space, Str "in", Space, Str "your", Space, Str "main", Space, Str "directory", Space]
 ,CodeBlock ("",["shell"],[]) "uce-805.phylip  ##thousands/hundreds of uce phylip files\n\nconcat_set_96 ## hundreds of concat_set_# directories\n\t\t\t  ## concat_set_# with multiple dirs inside e.g. uce-#.phylips \n\t   \t\tconcat_set_96/uce-1094.phylipnew/ uce-1094.phylip  \n           concat_set_96/uce-1933.phylipnew/ uce-1933.phylip\n              ## the nexus files used in PHYLUCE to concatenate\n           concat_set_96/uce-1094.phylip.nexus uce-1933.phylip.nexus \n\nconcat_set_96concat_partitionedbygenephy  # hundereds of directory with concatenated file and character set from PHYLUCE + RAxML results\n\n\t\tconcat_set_96concat_partitionedbygenephy/ concat_set_96.charsets\n\t\tconcat_set_96concat_partitionedbygenephy/ concat_set_96.phylip\n\t\tconcat_set_96concat_partitionedbygenephy/ RAxML_bestTree.concat_set_96concat_partitionedbygenephy.best.tre\n\t\tconcat_set_96concat_partitionedbygenephy/ RAxML_bipartitionsBranchLabels.concat_set_96concat_partitionedbygenephy.best.tre\n\t\tconcat_set_96concat_partitionedbygenephy/ RAxML_bipartitions.concat_set_96concat_partitionedbygenephy.best.tre\n\t\tconcat_set_96concat_partitionedbygenephy/ RAxML_bootstrap.concat_set_96concat_partitionedbygenephy.best.tre\n\t\tconcat_set_96concat_partitionedbygenephy/ RAxML_info.concat_set_96concat_partitionedbygenephy.best.tre\n\n"
 ,Para [Str ""]
 ,Para [Str "Now", Space, Str "back", Space, Str "to", Space, Strong [Str "R"], Str ",", Space, Str "we", Space, Str "will", Space, Str "list", Space, Str "the", Space, Str "phylips", Space, Str "in", Space, Str "the", Space, Str "top", Space, Str "directory", Space, Str "(the", Space, Str "one", Space, Str "with", Space, Str "the", Space, Str "original", Space, Str "complete", Space, Str "set", Space, Str "of", Space, Str "phylips),", Space, Str "and", Space, Str "then", Space, Str "subtract", Space, Str "those", Space, Str "from", Space, Str "the", Space, Str "ones", Space, Str "used", Space, Str "in", Space, Str "concatenation", Space, Str "for", Space, Str "example", Space, Str "\"", Strong [Str "concat", Emph [Str "set"], Str "96/uce-1094.phylipnew"], Str "/", Emph [Str "uce-1094.phylip"], Str "\".", Space]
 ,CodeBlock ("",["r"],[]) "\nsetwd(\"/PHYLIPS/birds/test_dir_oct/\") ## your wd\nnew_dir_list = list.dirs(path=\".\",  recursive = TRUE,  full.names = TRUE)\nnew_dir_list = new_dir_list[grepl(\"*.phylipnew\", new_dir_list) ]\n\nlibrary(ips)\nphy_files_list= list()\nfor(i in 1:length(new_dir_list)){\nphy_files_list[[i]] = list.files(path=new_dir_list[[i]], pattern = \"*.phylip$\", recursive = TRUE,  full.names = TRUE)\n}\nphy_files_list = unlist(phy_files_list)\ncmd =list()\n\nphy_files_list = gsub(\".*phylipnew/\", \"\", phy_files_list)\n\nall_phy_files = list.files(\".\", pattern = \"*.phylip$\", recursive = FALSE,  full.names = FALSE)\n\nthose_not_concated_by_gene = setdiff(all_phy_files, phy_files_list)\nwd = getwd()\n\nthose_not_concated_by_gene = paste(wd,\"/\" ,those_not_concated_by_gene, sep=\"\")\n\ndir.create(\"those_not_concated_by_gene\")\n\nfile.copy(those_not_concated_by_gene, \"those_not_concated_by_gene/\",  )\n\nsetwd(\"/PHYLIPS/birds/test_dir_oct/those_not_concated_by_gene/\")\n\n## !!!!!!!\n##   in unix\n## !!!!!!!!\ncd /PHYLIPS/birds/test_dir_oct/those_not_concated_by_gene/\nfind . -name \"uce-*.phylip\" -exec sh -c 'NEWDIR=`basename \"$1new\" ` ; mkdir \"$NEWDIR\" ; mv \"$1\" \"$NEWDIR\" ' _ {} \\;\n\n\n## !!!!!!!\n# !!!!!! Copy/paste \"run_RAxML.sh\" from directoy above, change number of cores and RAxML flavor raxmlHPC-SSE3 or raxmlHPC\n## !!!!!!!!\n\n\nphy_files = list.files(\".\", pattern = \"*.phylip$\", recursive = TRUE,  full.names = TRUE)\nwd = getwd()\nfor(i in 1:length(phy_files)){\nphy_files[[i]] = gsub(\"./\", \"/\", phy_files[[i]])\nphy_files[[i]] = paste(wd,phy_files[[i]], sep=\"\")\n}\n\nfor(i in 1:length(phy_files)){\ncmd[[i]] = paste(getwd(), \"/run_RAxML.sh \", phy_files[[i]], sep=\"\")\n}\n\n\n# make sure your  system has 48 cores or change the 48 to an appropriate number of cores.\n\nlibrary(parallel)\nfinal_raxml = mclapply(cmd, system, mc.cores=getOption(\"mc.cores\", 48))  ### 48 cores\n\n\n\n\n\n"
 ,Para [Str ""]
 ,Header 3 ("header-n393", [], []) [Str "5.", Space, Strong [Str "Round", Space, Str "up", Space, Str "the", Space, Str "bootstrap", Space, Str "files", Space, Str "paths", Space, Str "and", Space, Str "best", Space, Str "tree", Space, Str "files", Space, Str "for", Space, Str "ASTRAL"]]
 ,CodeBlock ("",["shell"],[]) "\n# in unix treminal \n\nmkdir tree_results\nmkdir boot_trees\n\n#find . -type f -iname \"RAxML_bestTree*\" -exec cp -t tree_results/ {} \\;\n\n#mkdir tree_results_mrB_msct\n\nfind . -name \"RAxML_bootstrap.*.best.tre\" -exec cp {} boot_trees/ \\;\ncd boot_trees\nfind `pwd` -name \"RAxML_bootstrap.*.best.tre\" > all.merge.boot_strapped_actualbstrees.txt\ncd ..\n\nfind . -name \"RAxML_bipartitions.uce-*.best.tre\" -exec cp {} tree_results/ \\;\n\ncd tree_results\nsed -n wall_best_tree.bird.merge.tre *.tre\n\n\n# copy files to ASTRAL dir\ncp all_best_tree.bird.merge.tre ~/ASTRAL-master/ #or where ever you have ASTRAL\ncd ..\ncd boot_trees\n\ncp all.merge.boot_strapped_actualbstrees.txt ~/ASTRAL-master/\n\n#run ASTRAL how you wish\njava -jar astral.5.6.1.jar -i all_best_tree.bird.merge.tre -b all.merge.boot_strapped_actualbstrees.txt -r 100 -o all.bird.reg.astral.speciestr_out.tre\n\n"
 ,Para [Str ""]
 ,Para [Str ""]
 ,Para [Str ""]
 ,Para [Space]
 ,Para [Str ""]]